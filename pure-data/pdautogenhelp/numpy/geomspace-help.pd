#N canvas 436 36 550 620 10;
#X obj 0 0 cnv 15 550 40 empty empty numpy/geomspace 3 12 0 18 #c4dcdc #000000 0;
#X obj 400 10 numpy/geomspace;
#X text 10 50 -------- \;     start : array_like \;         The starting value of the sequence. \;     stop : array_like \;         The final value of the sequence \,  unless `endpoint` is False. \;         In that case \,  ``num + 1`` values are spaced over the \;         interval in log-space \,  of which all but the last (a sequence of \;         length `num`) are returned. \;     num : integer \,  optional \;         Number of samples to generate.  Default is 50. \;     endpoint : boolean \,  optional \;         If true \,  `stop` is the last sample. Otherwise \,  it is not included. \;         Default is True. \;     dtype : dtype \;         The type of the output array.  If `dtype` is not given \,  infer the data \;         type from the other input arguments. \;     axis : int \,  optional \;         The axis in the result to store the samples.  Relevant only if start \;         or stop are array-like.  By default (0) \,  the samples will be along a \;         new axis inserted at the beginning. Use -1 to get an axis at the end. \;  \;         .. versionadded:: 1.16.0 \;  \;     Returns \;     ------- \;     samples : ndarray \;         `num` samples \,  equally spaced on a log scale. \;  \;     See Also \;     -------- \;     logspace : Similar to geomspace \,  but with endpoints specified using log \;                and base. \;     linspace : Similar to geomspace \,  but with arithmetic instead of geometric \;                progression. \;     arange : Similar to linspace \,  with the step size specified instead of the \;              number of samples. \;  \;     Notes \;     ----- \;     If the inputs or dtype are complex \,  the output will follow a logarithmic \;     spiral in the complex plane.  (There are an infinite number of spirals \;     passing through two points; the output will follow the shortest such path.) \;  \;     Examples \;     -------- \;     >>> np.geomspace(1 \,  1000 \,  num=4) \;     array([    1. \,     10. \,    100. \,   1000.]) \;     >>> np.geomspace(1 \,  1000 \,  num=3 \,  endpoint=False) \;     array([   1. \,    10. \,   100.]) \;     >>> np.geomspace(1 \,  1000 \,  num=4 \,  endpoint=False) \;     array([   1.         \,     5.62341325 \,    31.6227766  \,   177.827941  ]) \;     >>> np.geomspace(1 \,  256 \,  num=9) \;     array([   1. \,     2. \,     4. \,     8. \,    16. \,    32. \,    64. \,   128. \,   256.]) \;  \;     Note that the above may not produce exact integers: \;  \;     >>> np.geomspace(1 \,  256 \,  num=9 \,  dtype=int) \;     array([  1 \,    2 \,    4 \,    7 \,   16 \,   32 \,   63 \,  127 \,  256]) \;     >>> np.around(np.geomspace(1 \,  256 \,  num=9)).astype(int) \;     array([  1 \,    2 \,    4 \,    8 \,   16 \,   32 \,   64 \,  128 \,  256]) \;  \;     Negative \,  decreasing \,  and complex inputs are allowed: \;  \;     >>> np.geomspace(1000 \,  1 \,  num=4) \;     array([1000. \,   100. \,    10. \,     1.]) \;     >>> np.geomspace(-1000 \,  -1 \,  num=4) \;     array([-1000. \,   -100. \,    -10. \,     -1.]) \;     >>> np.geomspace(1j \,  1000j \,  num=4)  # Straight line \;     array([0.   +1.j \,  0.  +10.j \,  0. +100.j \,  0.+1000.j]) \;     >>> np.geomspace(-1+0j \,  1+0j \,  num=5)  # Circle \;     array([-1.00000000e+00+1.22464680e-16j \,  -7.07106781e-01+7.07106781e-01j \,  \;             6.12323400e-17+1.00000000e+00j \,   7.07106781e-01+7.07106781e-01j \,  \;             1.00000000e+00+0.00000000e+00j]) \;  \;     Graphical illustration of ``endpoint`` parameter: \;  \;     >>> import matplotlib.pyplot as plt \;     >>> N = 10 \;     >>> y = np.zeros(N) \;     >>> plt.semilogx(np.geomspace(1 \,  1000 \,  N \,  endpoint=True) \,  y + 1 \,  'o') \;     [<matplotlib.lines.Line2D object at 0x...>] \;     >>> plt.semilogx(np.geomspace(1 \,  1000 \,  N \,  endpoint=False) \,  y + 2 \,  'o') \;     [<matplotlib.lines.Line2D object at 0x...>] \;     >>> plt.axis([0.5 \,  2000 \,  0 \,  3]) \;     [0.5 \,  2000 \,  0 \,  3] \;     >>> plt.grid(True \,  color='0.7' \,  linestyle='-' \,  which='both' \,  axis='both') \;     >>> plt.show() \;  \;     ;
#X obj 0 1830 cnv 3 550 3 empty empty inlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 78 1850 cnv 17 3 17 empty \$0-pddp.cnv.let.0 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X text 100 1850 start;
#X obj 78 1880 cnv 17 3 17 empty \$0-pddp.cnv.let.1 1 5 9 0 16 #dcdcdc #9c9c9c 0;
#X text 100 1880 stop;
#X obj 78 1910 cnv 17 3 17 empty \$0-pddp.cnv.let.2 2 5 9 0 16 #dcdcdc #9c9c9c 0;
#X text 100 1910 num;
#X obj 78 1940 cnv 17 3 17 empty \$0-pddp.cnv.let.3 3 5 9 0 16 #dcdcdc #9c9c9c 0;
#X text 100 1940 endpoint;
#X obj 78 1970 cnv 17 3 17 empty \$0-pddp.cnv.let.4 4 5 9 0 16 #dcdcdc #9c9c9c 0;
#X text 100 1970 dtype;
#X obj 78 2000 cnv 17 3 17 empty \$0-pddp.cnv.let.5 5 5 9 0 16 #dcdcdc #9c9c9c 0;
#X text 100 2000 axis;
#X obj 0 2030 cnv 3 550 3 empty empty outlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 78 2060 cnv 17 3 17 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0;
#X text 100 2060 Result of the operation;
#X obj 0 2120 cnv 3 550 3 empty empty arguments 8 12 0 13 #dcdcdc #000000 0;
#X obj 0 2180 cnv 3 550 3 empty empty more_info 8 12 0 13 #dcdcdc #000000 0;
#X text 10 2200 This object and its help was autogenerated by FCPD_Workbench;
#X obj 0 2240 cnv 15 550 15 empty empty empty 20 12 0 14 #dcdcdc #404040 0;
