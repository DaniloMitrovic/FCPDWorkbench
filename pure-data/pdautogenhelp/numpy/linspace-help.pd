#N canvas 436 36 550 620 10;
#X obj 0 0 cnv 15 550 15 empty empty numpy/linspace 8 12 0 13 #c4dcdc #000000 0;
#X obj 400 10 numpy/linspace;
#X text 10 50 -------- \;     start : array_like \;         The starting value of the sequence. \;     stop : array_like \;         The end value of the sequence \,  unless `endpoint` is set to False. \;         In that case \,  the sequence consists of all but the last of ``num + 1`` \;         evenly spaced samples \,  so that `stop` is excluded.  Note that the step \;         size changes when `endpoint` is False. \;     num : int \,  optional \;         Number of samples to generate. Default is 50. Must be non-negative. \;     endpoint : bool \,  optional \;         If True \,  `stop` is the last sample. Otherwise \,  it is not included. \;         Default is True. \;     retstep : bool \,  optional \;         If True \,  return (`samples` \,  `step`) \,  where `step` is the spacing \;         between samples. \;     dtype : dtype \,  optional \;         The type of the output array.  If `dtype` is not given \,  infer the data \;         type from the other input arguments. \;  \;         .. versionadded:: 1.9.0 \;  \;     axis : int \,  optional \;         The axis in the result to store the samples.  Relevant only if start \;         or stop are array-like.  By default (0) \,  the samples will be along a \;         new axis inserted at the beginning. Use -1 to get an axis at the end. \;  \;         .. versionadded:: 1.16.0 \;  \;     Returns \;     ------- \;     samples : ndarray \;         There are `num` equally spaced samples in the closed interval \;         ``[start \,  stop]`` or the half-open interval ``[start \,  stop)`` \;         (depending on whether `endpoint` is True or False). \;     step : float \,  optional \;         Only returned if `retstep` is True \;  \;         Size of spacing between samples. \;  \;  \;     See Also \;     -------- \;     arange : Similar to `linspace` \,  but uses a step size (instead of the \;              number of samples). \;     geomspace : Similar to `linspace` \,  but with numbers spaced evenly on a log \;                 scale (a geometric progression). \;     logspace : Similar to `geomspace` \,  but with the end points specified as \;                logarithms. \;  \;     Examples \;     -------- \;     >>> np.linspace(2.0 \,  3.0 \,  num=5) \;     array([2.   \,  2.25 \,  2.5  \,  2.75 \,  3.  ]) \;     >>> np.linspace(2.0 \,  3.0 \,  num=5 \,  endpoint=False) \;     array([2.  \,   2.2 \,   2.4 \,   2.6 \,   2.8]) \;     >>> np.linspace(2.0 \,  3.0 \,  num=5 \,  retstep=True) \;     (array([2.   \,   2.25 \,   2.5  \,   2.75 \,   3.  ]) \,  0.25) \;  \;     Graphical illustration: \;  \;     >>> import matplotlib.pyplot as plt \;     >>> N = 8 \;     >>> y = np.zeros(N) \;     >>> x1 = np.linspace(0 \,  10 \,  N \,  endpoint=True) \;     >>> x2 = np.linspace(0 \,  10 \,  N \,  endpoint=False) \;     >>> plt.plot(x1 \,  y \,  'o') \;     [<matplotlib.lines.Line2D object at 0x...>] \;     >>> plt.plot(x2 \,  y + 0.5 \,  'o') \;     [<matplotlib.lines.Line2D object at 0x...>] \;     >>> plt.ylim([-0.5 \,  1]) \;     (-0.5 \,  1) \;     >>> plt.show() \;  \;     ;
#X obj 0 1550 cnv 3 550 3 empty empty inlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 78 1570 cnv 17 3 17 empty empty 0 8 12 0 13 #dcdcdc #9c9c9c 0;
#X text 100 1570 start;
#X obj 78 1600 cnv 17 3 17 empty empty 1 8 12 0 13 #dcdcdc #9c9c9c 0;
#X text 100 1600 stop;
#X obj 78 1630 cnv 17 3 17 empty empty 2 8 12 0 13 #dcdcdc #9c9c9c 0;
#X text 100 1630 num;
#X obj 78 1660 cnv 17 3 17 empty empty 3 8 12 0 13 #dcdcdc #9c9c9c 0;
#X text 100 1660 endpoint;
#X obj 78 1690 cnv 17 3 17 empty empty 4 8 12 0 13 #dcdcdc #9c9c9c 0;
#X text 100 1690 retstep;
#X obj 78 1720 cnv 17 3 17 empty empty 5 8 12 0 13 #dcdcdc #9c9c9c 0;
#X text 100 1720 dtype;
#X obj 78 1750 cnv 17 3 17 empty empty 6 8 12 0 13 #dcdcdc #9c9c9c 0;
#X text 100 1750 axis;
#X obj 0 1780 cnv 3 550 3 empty empty outlets 8 12 0 13 #dcdcdc #000000 0;
#X obj 78 1810 cnv 17 3 17 empty empty 0 8 12 0 13 #dcdcdc #9c9c9c 0;
#X text 100 1810 Result of the operation;
#X obj 0 1870 cnv 3 550 3 empty empty arguments 8 12 0 13 #dcdcdc #000000 0;
#X obj 0 1930 cnv 3 550 3 empty empty more_info 8 12 0 13 #dcdcdc #000000 0;
#X text 10 1950 This object and its help was autogenerated by FCPD_Workbench;
#X obj 0 1990 cnv 15 550 15 empty empty  8 12 0 13 #dcdcdc #404040 0;
